group = PROJECT_GROUP
version = PROJECT_VERSION

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: 'jacoco'
    apply plugin: 'signing'

    jacoco {
        // ignore lombok generated
        toolVersion = "0.8.9"
    }


    group = PROJECT_GROUP
    version = PROJECT_VERSION

    repositories {
        mavenCentral()
    }

    sourceCompatibility = JDK_VERSION
    targetCompatibility = JDK_VERSION

    dependencies {

        implementation 'org.apache.commons:commons-lang3:3.15.0'
        implementation "org.springframework.boot:spring-boot-starter:${SPRINGBOOT_VERSION}"
        implementation 'com.google.code.findbugs:jsr305:3.0.2'

        compileOnly 'org.projectlombok:lombok:1.18.30'
        annotationProcessor 'org.projectlombok:lombok:1.18.30'
    }

    tasks.named('jar') {
        if (project.name.contains("core")) {
            archivesBaseName = 'kguarder'
        }
        manifest {
            attributes(
                    'Project': PROJECT_GROUP,
                    'Project-Version': project.version,
                    'Module-Name': project.name,
                    'Built-Tool': "Gradle ${gradle.gradleVersion}",
                    'Build-Jdk': "${System.properties['java.version']}",
                    'Author': 'Koy Zhuang',
                    'License': 'MIT',
            )
        }
    }

    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java

                artifact tasks.sourcesJar
                artifact tasks.javadocJar
                pom {
                    if (project.name.contains("core")) {
                        artifactId = 'kguarder'
                    } else {
                        artifactId = project.name
                    }

                    groupId = PROJECT_GROUP
                    version = PROJECT_VERSION
                    if (project.name.contains("core")) {
                        name = 'kguarder'
                    } else {
                        name = project.name
                    }
                    description = 'A method based guarder for error-handling.'
                    url = 'https://github.com/koooooo-7/kguarder'


                    licenses {
                        license {
                            name = 'MIT Licence'
                            url = 'https://github.com/Koooooo-7/kguarder/blob/main/LICENSE'
                        }
                    }

                    developers {
                        developer {
                            name = 'Koy Zhuang'
                            email = 'koy@ko8e24.top'
                        }
                    }

                    scm {
                        connection = 'https://github.com/Koooooo-7/kguarder.git'
                        developerConnection = 'git@github.com:Koooooo-7/kguarder.git'
                        url = 'https://github.com/koooooo-7/kguarder'
                    }
                }
            }
        }
        repositories {
            mavenLocal()
            maven {
                def releasesRepoUrl = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
                def snapshotsRepoUrl = 'https://s01.oss.sonatype.org/content/repositories/snapshots'
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

                credentials {
                    def uname = version.endsWith('SNAPSHOT') ? "${ossrhUsername}" : "${sonatypeUsername}"
                    def pwd = version.endsWith('SNAPSHOT') ? "${ossrhPassword}" : "${sonatypePassword}"
                    username uname
                    password pwd
                }


            }
        }
    }

    signing {
        sign publishing.publications
    }

    test {
        useJUnitPlatform()
    }

    jacocoTestReport {
        reports {
            xml.enabled true
            html.enabled true
        }
    }

    check.dependsOn jacocoTestReport

}